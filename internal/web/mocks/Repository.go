// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	time "time"

	repository "github.com/clambin/solaredge-monitor/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: from, to
func (_m *Repository) Get(from time.Time, to time.Time) (repository.Measurements, error) {
	ret := _m.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 repository.Measurements
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) (repository.Measurements, error)); ok {
		return rf(from, to)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) repository.Measurements); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Measurements)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - from time.Time
//   - to time.Time
func (_e *Repository_Expecter) Get(from interface{}, to interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", from, to)}
}

func (_c *Repository_Get_Call) Run(run func(from time.Time, to time.Time)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Time))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 repository.Measurements, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Get_Call) RunAndReturn(run func(time.Time, time.Time) (repository.Measurements, error)) *Repository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataRange provides a mock function with no fields
func (_m *Repository) GetDataRange() (time.Time, time.Time, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDataRange")
	}

	var r0 time.Time
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func() (time.Time, time.Time, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func() time.Time); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_GetDataRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataRange'
type Repository_GetDataRange_Call struct {
	*mock.Call
}

// GetDataRange is a helper method to define mock.On call
func (_e *Repository_Expecter) GetDataRange() *Repository_GetDataRange_Call {
	return &Repository_GetDataRange_Call{Call: _e.mock.On("GetDataRange")}
}

func (_c *Repository_GetDataRange_Call) Run(run func()) *Repository_GetDataRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetDataRange_Call) Return(_a0 time.Time, _a1 time.Time, _a2 error) *Repository_GetDataRange_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Repository_GetDataRange_Call) RunAndReturn(run func() (time.Time, time.Time, error)) *Repository_GetDataRange_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
