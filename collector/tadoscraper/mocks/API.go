// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	tado "github.com/clambin/tado"
	mock "github.com/stretchr/testify/mock"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// GetWeatherInfo provides a mock function with given fields: ctx
func (_m *API) GetWeatherInfo(ctx context.Context) (tado.WeatherInfo, error) {
	ret := _m.Called(ctx)

	var r0 tado.WeatherInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (tado.WeatherInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) tado.WeatherInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(tado.WeatherInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPI(t mockConstructorTestingTNewAPI) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
